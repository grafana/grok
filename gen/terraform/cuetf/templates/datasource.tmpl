package provider

import (
	"context"
	"encoding/json"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &{{.Name}}DataSource{}
	_ datasource.DataSourceWithConfigure = &{{.Name}}DataSource{}
)

func New{{.Name}}DataSource() datasource.DataSource {
	return &{{.Name}}DataSource{}
}

// {{.Name}}DataSource defines the data source implementation.
type {{.Name}}DataSource struct {}

// {{.Name}}DataSourceModel describes the data source data model.
type {{.Name}}DataSourceModel struct {
	{{.ModelFields}}
	ToJSON types.String `tfsdk:"to_json"`
}

func (d *{{.Name}}DataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_{{lowerCase .Name}}"
}

func (d *{{.Name}}DataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "{{.Description}}",
		Attributes: map[string]schema.Attribute{
            {{.SchemaAttributes}}
            "to_json": schema.StringAttribute{
				Computed:            true,
                MarkdownDescription: "This datasource rendered as JSON",
            },
		},
	}
}

func (d *{{.Name}}DataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {}

func (d *{{.Name}}DataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data {{.Name}}DataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	
	{{ if .Defaults }}d.applyDefaults(&data){{ end }}
    JSONConfig, err := json.Marshal(data)
    if err != nil {
    	resp.Diagnostics.AddError("JSON marshalling error", err.Error())
	    return
    }

	// Not sure about that
    data.ToJSON = types.StringValue(string(JSONConfig))
    
	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
{{ if .Defaults }}
func (d *{{.Name}}DataSource) applyDefaults(data *{{.Name}}DataSourceModel) {
	{{.Defaults -}}
}
{{ end }}