{
  "openapi": "3.0.0",
  "info": {
    "title": "TempoDataQuery",
    "version": "0.0"
  },
  "paths": {},
  "components": {
    "schemas": {
      "DataQuery": {
        "description": "These are the common properties available to all queries in all datasources.\nSpecific implementations will *extend* this interface, adding the required\nproperties for the given context.",
        "type": "object",
        "required": [
          "refId"
        ],
        "properties": {
          "refId": {
            "description": "A unique identifier for the query within the list of targets.\nIn server side expressions, the refId is used as a variable name to identify results.\nBy default, the UI will assign A-\u003eZ; however setting meaningful names may be useful.",
            "type": "string"
          },
          "hide": {
            "description": "true if query is disabled (ie should not be returned to the dashboard)\nNote this does not always imply that the query should not be executed since\nthe results from a hidden query may be used as the input to other queries (SSE etc)",
            "type": "boolean"
          },
          "queryType": {
            "description": "Specify the query flavor\nTODO make this required and give it a default",
            "type": "string"
          },
          "datasource": {
            "description": "For mixed data sources the selected datasource is on the query level.\nFor non mixed scenarios this is undefined.\nTODO find a better way to do this ^ that's friendly to schema\nTODO this shouldn't be unknown but DataSourceRef | null"
          }
        },
        "$schema": "http://json-schema.org/draft-04/schema#"
      },
      "TempoDataQuery": {
        "type": "object",
        "$schema": "http://json-schema.org/draft-04/schema#"
      },
      "TempoQuery": {
        "type": "object",
        "properties": {
          "query": {
            "description": "TraceQL query or trace ID",
            "type": "string"
          },
          "search": {
            "description": "Logfmt query to filter traces by their tags. Example: http.status_code=200 error=true",
            "type": "string"
          },
          "serviceName": {
            "description": "Query traces by service name",
            "type": "string"
          },
          "spanName": {
            "description": "Query traces by span name",
            "type": "string"
          },
          "minDuration": {
            "description": "Define the minimum duration to select traces. Use duration format, for example: 1.2s, 100ms",
            "type": "string"
          },
          "maxDuration": {
            "description": "Define the maximum duration to select traces. Use duration format, for example: 1.2s, 100ms",
            "type": "string"
          },
          "serviceMapQuery": {
            "description": "Filters to be included in a PromQL query to select data for the service graph. Example: {client=\"app\",service=\"app\"}",
            "type": "string"
          },
          "limit": {
            "description": "Defines the maximum number of traces that are returned from Tempo",
            "type": "integer",
            "format": "int64"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TraceqlFilter"
            }
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/DataQuery"
          },
          {
            "required": [
              "query",
              "filters"
            ]
          }
        ],
        "$schema": "http://json-schema.org/draft-04/schema#"
      },
      "TempoQueryType": {
        "description": "search = Loki search, nativeSearch = Tempo search for backwards compatibility",
        "type": "string",
        "enum": [
          "traceql",
          "traceqlSearch",
          "search",
          "serviceMap",
          "upload",
          "nativeSearch",
          "clear"
        ],
        "$schema": "http://json-schema.org/draft-04/schema#"
      },
      "TraceqlFilter": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "description": "Uniquely identify the filter, will not be used in the query generation",
            "type": "string"
          },
          "tag": {
            "description": "The tag for the search filter, for example: .http.status_code, .service.name, status",
            "type": "string"
          },
          "operator": {
            "description": "The operator that connects the tag to the value, for example: =, \u003e, !=, =~",
            "type": "string"
          },
          "value": {
            "description": "The value for the search filter",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            ]
          },
          "valueType": {
            "description": "The type of the value, used for example to check whether we need to wrap the value in quotes when generating the query",
            "type": "string"
          },
          "scope": {
            "$ref": "#/components/schemas/TraceqlSearchScope"
          }
        },
        "$schema": "http://json-schema.org/draft-04/schema#"
      },
      "TraceqlSearchScope": {
        "description": "static fields are pre-set in the UI, dynamic fields are added by the user",
        "type": "string",
        "enum": [
          "unscoped",
          "resource",
          "span"
        ],
        "$schema": "http://json-schema.org/draft-04/schema#"
      }
    }
  }
}