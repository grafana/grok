// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     LatestJenny
//
// Run 'go generate ./' from repository root to regenerate.

package datasources

import (
	"context"
	"encoding/json"
	"fmt"
	"strconv"
	"time"

	"github.com/grafana/terraform-provider-grafana-framework/internal/common"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &librarypanelDataSource{}
	_ datasource.DataSourceWithConfigure = &librarypanelDataSource{}
)

func NewlibrarypanelDataSource() datasource.DataSource {
	return &librarypanelDataSource{}
}

// librarypanelDataSource defines the data source implementation.
type librarypanelDataSource struct {
	client *common.Client
}

// librarypanelDataSourceModel describes the data source data model.
type librarypanelDataSourceModel struct {
	TODO modelFields
	ToJSON types.String `tfsdk:"to_json"`
}

func (d *librarypanelDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_librarypanel"
}

func (d *librarypanelDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "TODO description",

		Attributes: map[string]schema.Attribute{
            
            "to_json": schema.StringAttribute{
				Computed:            true,
                MarkdownDescription: "This datasource rendered as JSON",
            }
		},
	}
}

func (d *librarypanelDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*common.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected *common.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	d.client = client
}

func (d *librarypanelDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data librarypanelDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

    JSONConfig, err := json.Marshal(data)
    if err != nil {
    	resp.Diagnostics.AddError("JSON marshalling error", err.Error())
	    return
    }

	// Not sure about that
	data.ID = types.StringValue(strconv.FormatInt(time.Now().Unix(), 10))
    data.ToJSON = types.StringValue(string(JSONConfig))
    
	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
