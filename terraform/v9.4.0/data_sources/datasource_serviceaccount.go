// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     LatestJenny
//
// Run 'go generate ./' from repository root to regenerate.

package datasources

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/grafana/terraform-provider-grafana-framework/internal/common"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &serviceaccountDataSource{}
	_ datasource.DataSourceWithConfigure = &serviceaccountDataSource{}
)

func NewserviceaccountDataSource() datasource.DataSource {
	return &serviceaccountDataSource{}
}

// serviceaccountDataSource defines the data source implementation.
type serviceaccountDataSource struct {
	client *common.Client
}

// serviceaccountDataSourceModel describes the data source data model.
type serviceaccountDataSourceModel struct {
	Id            types.Int64  `tfsdk:"id", json:"id"`
	OrgId         types.Int64  `tfsdk:"orgId", json:"orgId"`
	Name          types.String `tfsdk:"name", json:"name"`
	Login         types.String `tfsdk:"login", json:"login"`
	IsDisabled    types.Bool   `tfsdk:"isDisabled", json:"isDisabled"`
	Role          types.String `tfsdk:"role", json:"role"`
	Tokens        types.Int64  `tfsdk:"tokens", json:"tokens"`
	AvatarUrl     types.String `tfsdk:"avatarUrl", json:"avatarUrl"`
	AccessControl types.Object `tfsdk:"accessControl", json:"accessControl"`
	Teams         types.List   `tfsdk:"teams", json:"teams"`
	Created       types.Int64  `tfsdk:"created", json:"created"`
	Updated       types.Int64  `tfsdk:"updated", json:"updated"`
	ToJSON        types.String `tfsdk:"to_json"`
}

func (d *serviceaccountDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_serviceaccount"
}

func (d *serviceaccountDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "TODO description",

		Attributes: map[string]schema.Attribute{
			"id": schema.Int64Attribute{
				MarkdownDescription: `ID is the unique identifier of the service account in the database.`,
				Computed:            false,
				Optional:            false,
			},
			"orgId": schema.Int64Attribute{
				MarkdownDescription: `OrgId is the ID of an organisation the service account belongs to.`,
				Computed:            false,
				Optional:            false,
			},
			"name": schema.StringAttribute{
				MarkdownDescription: `Name of the service account.`,
				Computed:            false,
				Optional:            false,
			},
			"login": schema.StringAttribute{
				MarkdownDescription: `Login of the service account.`,
				Computed:            false,
				Optional:            false,
			},
			"isDisabled": schema.BoolAttribute{
				MarkdownDescription: `IsDisabled indicates if the service account is disabled.`,
				Computed:            false,
				Optional:            false,
			},
			"role": schema.StringAttribute{
				MarkdownDescription: `Role is the Grafana organization role of the service account which can be 'Viewer', 'Editor', 'Admin'.`,
				Computed:            false,
				Optional:            false,
			},
			"tokens": schema.Int64Attribute{
				MarkdownDescription: `Tokens is the number of active tokens for the service account.
Tokens are used to authenticate the service account against Grafana.`,
				Computed: false,
				Optional: false,
			},
			"avatarUrl": schema.StringAttribute{
				MarkdownDescription: `AvatarUrl is the service account's avatar URL. It allows the frontend to display a picture in front
of the service account.`,
				Computed: false,
				Optional: false,
			},
			"accessControl": schema.ObjectAttribute{
				MarkdownDescription: `AccessControl metadata associated with a given resource.`,
				Computed:            false,
				Optional:            true,
			},
			"teams": schema.ListAttribute{
				MarkdownDescription: `Teams is a list of teams the service account belongs to.`,
				Computed:            false,
				Optional:            true,
			},
			"created": schema.Int64Attribute{
				MarkdownDescription: `Created indicates when the service account was created.`,
				Computed:            false,
				Optional:            true,
			},
			"updated": schema.Int64Attribute{
				MarkdownDescription: `Updated indicates when the service account was updated.`,
				Computed:            false,
				Optional:            true,
			},
			"to_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *serviceaccountDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*common.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected *common.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	d.client = client
}

func (d *serviceaccountDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data serviceaccountDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// Not sure about that
	data.ToJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
