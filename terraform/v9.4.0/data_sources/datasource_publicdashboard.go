// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     LatestJenny
//
// Run 'go generate ./' from repository root to regenerate.

package datasources

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/grafana/terraform-provider-grafana-framework/internal/common"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &publicdashboardDataSource{}
	_ datasource.DataSourceWithConfigure = &publicdashboardDataSource{}
)

func NewpublicdashboardDataSource() datasource.DataSource {
	return &publicdashboardDataSource{}
}

// publicdashboardDataSource defines the data source implementation.
type publicdashboardDataSource struct {
	client *common.Client
}

// publicdashboardDataSourceModel describes the data source data model.
type publicdashboardDataSourceModel struct {
	Uid                  types.String `tfsdk:"uid", json:"uid"`
	DashboardUid         types.String `tfsdk:"dashboardUid", json:"dashboardUid"`
	AccessToken          types.String `tfsdk:"accessToken", json:"accessToken"`
	IsEnabled            types.Bool   `tfsdk:"isEnabled", json:"isEnabled"`
	AnnotationsEnabled   types.Bool   `tfsdk:"annotationsEnabled", json:"annotationsEnabled"`
	TimeSelectionEnabled types.Bool   `tfsdk:"timeSelectionEnabled", json:"timeSelectionEnabled"`
	ToJSON               types.String `tfsdk:"to_json"`
}

func (d *publicdashboardDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_publicdashboard"
}

func (d *publicdashboardDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "TODO description",

		Attributes: map[string]schema.Attribute{
			"uid": schema.StringAttribute{
				MarkdownDescription: `Unique public dashboard identifier`,
				Computed:            false,
				Optional:            false,
			},
			"dashboardUid": schema.StringAttribute{
				MarkdownDescription: `Dashboard unique identifier referenced by this public dashboard`,
				Computed:            false,
				Optional:            false,
			},
			"accessToken": schema.StringAttribute{
				MarkdownDescription: `Unique public access token`,
				Computed:            false,
				Optional:            true,
			},
			"isEnabled": schema.BoolAttribute{
				MarkdownDescription: `Flag that indicates if the public dashboard is enabled`,
				Computed:            false,
				Optional:            false,
			},
			"annotationsEnabled": schema.BoolAttribute{
				MarkdownDescription: `Flag that indicates if annotations are enabled`,
				Computed:            false,
				Optional:            false,
			},
			"timeSelectionEnabled": schema.BoolAttribute{
				MarkdownDescription: `Flag that indicates if the time range picker is enabled`,
				Computed:            false,
				Optional:            false,
			},
			"to_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *publicdashboardDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*common.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected *common.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	d.client = client
}

func (d *publicdashboardDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data publicdashboardDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// Not sure about that
	data.ToJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
