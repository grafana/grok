// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     LatestJenny
//
// Run 'go generate ./' from repository root to regenerate.

package datasources

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/grafana/terraform-provider-grafana-framework/internal/common"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &librarypanelDataSource{}
	_ datasource.DataSourceWithConfigure = &librarypanelDataSource{}
)

func NewlibrarypanelDataSource() datasource.DataSource {
	return &librarypanelDataSource{}
}

// librarypanelDataSource defines the data source implementation.
type librarypanelDataSource struct {
	client *common.Client
}

// librarypanelDataSourceModel describes the data source data model.
type librarypanelDataSourceModel struct {
	FolderUid     types.String `tfsdk:"folderUid", json:"folderUid"`
	Uid           types.String `tfsdk:"uid", json:"uid"`
	Name          types.String `tfsdk:"name", json:"name"`
	Description   types.String `tfsdk:"description", json:"description"`
	Type          types.String `tfsdk:"type", json:"type"`
	SchemaVersion types.Int64  `tfsdk:"schemaVersion", json:"schemaVersion"`
	Version       types.Int64  `tfsdk:"version", json:"version"`
	Model         types.Object `tfsdk:"model", json:"model"`
	Meta          types.Object `tfsdk:"meta", json:"meta"`
	ToJSON        types.String `tfsdk:"to_json"`
}

func (d *librarypanelDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_librarypanel"
}

func (d *librarypanelDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "TODO description",

		Attributes: map[string]schema.Attribute{
			"folderUid": schema.StringAttribute{
				MarkdownDescription: `Folder UID`,
				Computed:            false,
				Optional:            true,
			},
			"uid": schema.StringAttribute{
				MarkdownDescription: `Library element UID`,
				Computed:            false,
				Optional:            false,
			},
			"name": schema.StringAttribute{
				MarkdownDescription: `Panel name (also saved in the model)`,
				Computed:            false,
				Optional:            false,
			},
			"description": schema.StringAttribute{
				MarkdownDescription: `Panel description`,
				Computed:            false,
				Optional:            true,
			},
			"type": schema.StringAttribute{
				MarkdownDescription: `The panel type (from inside the model)`,
				Computed:            false,
				Optional:            false,
			},
			"schemaVersion": schema.Int64Attribute{
				MarkdownDescription: `Dashboard version when this was saved (zero if unknown)`,
				Computed:            false,
				Optional:            true,
			},
			"version": schema.Int64Attribute{
				MarkdownDescription: `panel version, incremented each time the dashboard is updated.`,
				Computed:            false,
				Optional:            false,
			},
			"model": schema.ObjectAttribute{
				MarkdownDescription: `TODO: should be the same panel schema defined in dashboard
Typescript: Omit<Panel, 'gridPos' | 'id' | 'libraryPanel'>;`,
				Computed: false,
				Optional: false,
			},
			"meta": schema.ObjectAttribute{
				MarkdownDescription: `Object storage metadata`,
				Computed:            false,
				Optional:            true,
			},
			"to_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *librarypanelDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*common.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected *common.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	d.client = client
}

func (d *librarypanelDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data librarypanelDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// Not sure about that
	data.ToJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
