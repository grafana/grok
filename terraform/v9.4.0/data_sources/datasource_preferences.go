// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     LatestJenny
//
// Run 'go generate ./' from repository root to regenerate.

package datasources

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/grafana/terraform-provider-grafana-framework/internal/common"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &preferencesDataSource{}
	_ datasource.DataSourceWithConfigure = &preferencesDataSource{}
)

func NewpreferencesDataSource() datasource.DataSource {
	return &preferencesDataSource{}
}

// preferencesDataSource defines the data source implementation.
type preferencesDataSource struct {
	client *common.Client
}

// preferencesDataSourceModel describes the data source data model.
type preferencesDataSourceModel struct {
	HomeDashboardUID types.String `tfsdk:"homeDashboardUID", json:"homeDashboardUID"`
	Timezone         types.String `tfsdk:"timezone", json:"timezone"`
	WeekStart        types.String `tfsdk:"weekStart", json:"weekStart"`
	Theme            types.String `tfsdk:"theme", json:"theme"`
	Language         types.String `tfsdk:"language", json:"language"`
	QueryHistory     types.Object `tfsdk:"queryHistory", json:"queryHistory"`
	ToJSON           types.String `tfsdk:"to_json"`
}

func (d *preferencesDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_preferences"
}

func (d *preferencesDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "TODO description",

		Attributes: map[string]schema.Attribute{
			"homeDashboardUID": schema.StringAttribute{
				MarkdownDescription: `UID for the home dashboard`,
				Computed:            false,
				Optional:            true,
			},
			"timezone": schema.StringAttribute{
				MarkdownDescription: `The timezone selection
TODO: this should use the timezone defined in common`,
				Computed: false,
				Optional: true,
			},
			"weekStart": schema.StringAttribute{
				MarkdownDescription: `day of the week (sunday, monday, etc)`,
				Computed:            false,
				Optional:            true,
			},
			"theme": schema.StringAttribute{
				MarkdownDescription: `light, dark, empty is default`,
				Computed:            false,
				Optional:            true,
			},
			"language": schema.StringAttribute{
				MarkdownDescription: `Selected language (beta)`,
				Computed:            false,
				Optional:            true,
			},
			"queryHistory": schema.ObjectAttribute{
				MarkdownDescription: `Explore query history preferences`,
				Computed:            false,
				Optional:            true,
			},
			"to_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *preferencesDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*common.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected *common.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	d.client = client
}

func (d *preferencesDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data preferencesDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// Not sure about that
	data.ToJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
