// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     terraform
// Using jennies:
//     TerraformDataSourceJenny
//     LatestJenny
//
// Run 'go generate ./' from repository root to regenerate.

package datasources

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/grafana/terraform-provider-grafana-framework/internal/common"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

// Ensure provider defined types fully satisfy framework interfaces.
var (
	_ datasource.DataSource              = &dashboardDataSource{}
	_ datasource.DataSourceWithConfigure = &dashboardDataSource{}
)

func NewdashboardDataSource() datasource.DataSource {
	return &dashboardDataSource{}
}

// dashboardDataSource defines the data source implementation.
type dashboardDataSource struct {
	client *common.Client
}

// dashboardDataSourceModel describes the data source data model.
type dashboardDataSourceModel struct {
	Id                   types.Int64  `tfsdk:"id", json:"id"`
	Uid                  types.String `tfsdk:"uid", json:"uid"`
	Title                types.String `tfsdk:"title", json:"title"`
	Description          types.String `tfsdk:"description", json:"description"`
	Revision             types.Int64  `tfsdk:"revision", json:"revision"`
	GnetId               types.String `tfsdk:"gnetId", json:"gnetId"`
	Tags                 types.List   `tfsdk:"tags", json:"tags"`
	Style                types.String `tfsdk:"style", json:"style"`
	Timezone             types.String `tfsdk:"timezone", json:"timezone"`
	Editable             types.Bool   `tfsdk:"editable", json:"editable"`
	GraphTooltip         types.Int64  `tfsdk:"graphTooltip", json:"graphTooltip"`
	Time                 types.Object `tfsdk:"time", json:"time"`
	Timepicker           types.Object `tfsdk:"timepicker", json:"timepicker"`
	FiscalYearStartMonth types.Int64  `tfsdk:"fiscalYearStartMonth", json:"fiscalYearStartMonth"`
	LiveNow              types.Bool   `tfsdk:"liveNow", json:"liveNow"`
	WeekStart            types.String `tfsdk:"weekStart", json:"weekStart"`
	Refresh              types.String `tfsdk:"refresh", json:"refresh"`
	SchemaVersion        types.Int64  `tfsdk:"schemaVersion", json:"schemaVersion"`
	Version              types.Int64  `tfsdk:"version", json:"version"`
	Panels               types.List   `tfsdk:"panels", json:"panels"`
	Templating           types.Object `tfsdk:"templating", json:"templating"`
	Annotations          types.Object `tfsdk:"annotations", json:"annotations"`
	Links                types.List   `tfsdk:"links", json:"links"`
	Snapshot             types.Object `tfsdk:"snapshot", json:"snapshot"`
	ToJSON               types.String `tfsdk:"to_json"`
}

func (d *dashboardDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_dashboard"
}

func (d *dashboardDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "TODO description",

		Attributes: map[string]schema.Attribute{
			"id": schema.Int64Attribute{
				MarkdownDescription: `Unique numeric identifier for the dashboard.
TODO must isolate or remove identifiers local to a Grafana instance...?`,
				Computed: false,
				Optional: true,
			},
			"uid": schema.StringAttribute{
				MarkdownDescription: `Unique dashboard identifier that can be generated by anyone. string (8-40)`,
				Computed:            false,
				Optional:            true,
			},
			"title": schema.StringAttribute{
				MarkdownDescription: `Title of dashboard.`,
				Computed:            false,
				Optional:            true,
			},
			"description": schema.StringAttribute{
				MarkdownDescription: `Description of dashboard.`,
				Computed:            false,
				Optional:            true,
			},
			"revision": schema.Int64Attribute{
				MarkdownDescription: `Version of the current dashboard data`,
				Computed:            false,
				Optional:            false,
			},
			"gnetId": schema.StringAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
			},
			"tags": schema.ListAttribute{
				MarkdownDescription: `Tags associated with dashboard.`,
				Computed:            false,
				Optional:            true,
			},
			"style": schema.StringAttribute{
				MarkdownDescription: `Theme of dashboard.`,
				Computed:            false,
				Optional:            false,
			},
			"timezone": schema.StringAttribute{
				MarkdownDescription: `Timezone of dashboard. Accepts IANA TZDB zone ID or "browser" or "utc".`,
				Computed:            false,
				Optional:            true,
			},
			"editable": schema.BoolAttribute{
				MarkdownDescription: `Whether a dashboard is editable or not.`,
				Computed:            false,
				Optional:            false,
			},
			"graphTooltip": schema.Int64Attribute{
				MarkdownDescription: `Configuration of dashboard cursor sync behavior.`,
				Computed:            false,
				Optional:            false,
			},
			"time": schema.ObjectAttribute{
				MarkdownDescription: `Time range for dashboard, e.g. last 6 hours, last 7 days, etc`,
				Computed:            false,
				Optional:            true,
			},
			"timepicker": schema.ObjectAttribute{
				MarkdownDescription: `TODO docs
TODO this appears to be spread all over in the frontend. Concepts will likely need tidying in tandem with schema changes`,
				Computed: false,
				Optional: true,
			},
			"fiscalYearStartMonth": schema.Int64Attribute{
				MarkdownDescription: `The month that the fiscal year starts on.  0 = January, 11 = December`,
				Computed:            false,
				Optional:            true,
			},
			"liveNow": schema.BoolAttribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
			},
			"weekStart": schema.StringAttribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
			},
			"refresh": schema.Attribute{
				MarkdownDescription: `Refresh rate of dashboard. Represented via interval string, e.g. "5s", "1m", "1h", "1d".`,
				Computed:            false,
				Optional:            true,
			},
			"schemaVersion": schema.Int64Attribute{
				MarkdownDescription: `Version of the JSON schema, incremented each time a Grafana update brings
changes to said schema.
TODO this is the existing schema numbering system. It will be replaced by Thema's themaVersion`,
				Computed: false,
				Optional: false,
			},
			"version": schema.Int64Attribute{
				MarkdownDescription: `Version of the dashboard, incremented each time the dashboard is updated.`,
				Computed:            false,
				Optional:            true,
			},
			"panels": schema.ListAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
			},
			"templating": schema.ObjectAttribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
			},
			"annotations": schema.ObjectAttribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
			},
			"links": schema.ListAttribute{
				MarkdownDescription: `TODO docs`,
				Computed:            false,
				Optional:            true,
			},
			"snapshot": schema.ObjectAttribute{
				MarkdownDescription: ``,
				Computed:            false,
				Optional:            true,
			},
			"to_json": schema.StringAttribute{
				Computed:            true,
				MarkdownDescription: "This datasource rendered as JSON",
			},
		},
	}
}

func (d *dashboardDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*common.Client)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected Data Source Configure Type",
			fmt.Sprintf("Expected *common.Client, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	d.client = client
}

func (d *dashboardDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data dashboardDataSourceModel

	// Read Terraform configuration data into the model
	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	JSONConfig, err := json.Marshal(data)
	if err != nil {
		resp.Diagnostics.AddError("JSON marshalling error", err.Error())
		return
	}

	// Not sure about that
	data.ToJSON = types.StringValue(string(JSONConfig))

	// Write logs using the tflog package
	// Documentation: https://terraform.io/plugin/log
	tflog.Trace(ctx, "read a data source")

	// Save data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
