// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     go
// Using jennies:
//     GoTypesJenny
//     ComposableLatestMajorsOrXJenny
//
// Run 'go generate ./' from repository root to regenerate.

package bargaugepanelcfg

// Defines values for BarGaugeDisplayMode.
const (
	BarGaugeDisplayModeBasic    BarGaugeDisplayMode = "basic"
	BarGaugeDisplayModeGradient BarGaugeDisplayMode = "gradient"
	BarGaugeDisplayModeLcd      BarGaugeDisplayMode = "lcd"
)

// Defines values for BarGaugeValueMode.
const (
	BarGaugeValueModeColor  BarGaugeValueMode = "color"
	BarGaugeValueModeHidden BarGaugeValueMode = "hidden"
	BarGaugeValueModeText   BarGaugeValueMode = "text"
)

// Defines values for VizOrientation.
const (
	VizOrientationAuto       VizOrientation = "auto"
	VizOrientationHorizontal VizOrientation = "horizontal"
	VizOrientationVertical   VizOrientation = "vertical"
)

// Enum expressing the possible display modes
// for the bar gauge component of Grafana UI
type BarGaugeDisplayMode string

// Allows for the table cell gauge display type to set the gauge mode.
type BarGaugeValueMode string

// TODO docs
type OptionsWithTextFormatting struct {
	// TODO docs
	Text *VizTextDisplayOptions `json:"text,omitempty"`
}

// PanelOptions defines model for PanelOptions.
type PanelOptions struct {
	// TODO docs
	Text *VizTextDisplayOptions `json:"text,omitempty"`
}

// TODO docs
type ReduceDataOptions struct {
	// When !values, pick one value for the whole field
	Calcs []string `json:"calcs"`

	// Which fields to show.  By default this is only numeric fields
	Fields *string `json:"fields,omitempty"`

	// Limit if showing all values limit
	Limit *float32 `json:"limit,omitempty"`

	// If true show each row value
	Values *bool `json:"values,omitempty"`
}

// SingleStatBaseOptions defines model for SingleStatBaseOptions.
type SingleStatBaseOptions struct {
	// TODO docs
	Text *VizTextDisplayOptions `json:"text,omitempty"`
}

// TODO docs
type VizOrientation string

// TODO docs
type VizTextDisplayOptions struct {
	// Explicit title text size
	TitleSize *float32 `json:"titleSize,omitempty"`

	// Explicit value text size
	ValueSize *float32 `json:"valueSize,omitempty"`
}
