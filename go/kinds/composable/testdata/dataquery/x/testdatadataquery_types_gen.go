// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     go
// Using jennies:
//     GoTypesJenny
//     ComposableLatestMajorsOrXJenny
//
// Run 'go generate ./' from repository root to regenerate.

package testdatadataquery

// Defines values for NodesQueryType.
const (
	NodesQueryTypeRandom      NodesQueryType = "random"
	NodesQueryTypeRandomEdges NodesQueryType = "random edges"
	NodesQueryTypeResponse    NodesQueryType = "response"
)

// Defines values for StreamingQueryType.
const (
	StreamingQueryTypeFetch  StreamingQueryType = "fetch"
	StreamingQueryTypeLogs   StreamingQueryType = "logs"
	StreamingQueryTypeSignal StreamingQueryType = "signal"
)

// Defines values for TestDataQueryType.
const (
	TestDataQueryTypeAnnotations                  TestDataQueryType = "annotations"
	TestDataQueryTypeArrow                        TestDataQueryType = "arrow"
	TestDataQueryTypeCsvContent                   TestDataQueryType = "csv_content"
	TestDataQueryTypeCsvFile                      TestDataQueryType = "csv_file"
	TestDataQueryTypeCsvMetricValues              TestDataQueryType = "csv_metric_values"
	TestDataQueryTypeDatapointsOutsideRange       TestDataQueryType = "datapoints_outside_range"
	TestDataQueryTypeExponentialHeatmapBucketData TestDataQueryType = "exponential_heatmap_bucket_data"
	TestDataQueryTypeFlameGraph                   TestDataQueryType = "flame_graph"
	TestDataQueryTypeGrafanaApi                   TestDataQueryType = "grafana_api"
	TestDataQueryTypeLinearHeatmapBucketData      TestDataQueryType = "linear_heatmap_bucket_data"
	TestDataQueryTypeLive                         TestDataQueryType = "live"
	TestDataQueryTypeLogs                         TestDataQueryType = "logs"
	TestDataQueryTypeManualEntry                  TestDataQueryType = "manual_entry"
	TestDataQueryTypeNoDataPoints                 TestDataQueryType = "no_data_points"
	TestDataQueryTypeNodeGraph                    TestDataQueryType = "node_graph"
	TestDataQueryTypePredictableCsvWave           TestDataQueryType = "predictable_csv_wave"
	TestDataQueryTypePredictablePulse             TestDataQueryType = "predictable_pulse"
	TestDataQueryTypeRandomWalk                   TestDataQueryType = "random_walk"
	TestDataQueryTypeRandomWalkTable              TestDataQueryType = "random_walk_table"
	TestDataQueryTypeRandomWalkWithError          TestDataQueryType = "random_walk_with_error"
	TestDataQueryTypeRawFrame                     TestDataQueryType = "raw_frame"
	TestDataQueryTypeServerError500               TestDataQueryType = "server_error_500"
	TestDataQueryTypeSimulation                   TestDataQueryType = "simulation"
	TestDataQueryTypeSlowQuery                    TestDataQueryType = "slow_query"
	TestDataQueryTypeStreamingClient              TestDataQueryType = "streaming_client"
	TestDataQueryTypeTableStatic                  TestDataQueryType = "table_static"
	TestDataQueryTypeTrace                        TestDataQueryType = "trace"
	TestDataQueryTypeUsa                          TestDataQueryType = "usa"
	TestDataQueryTypeVariablesQuery               TestDataQueryType = "variables-query"
)

// CSVWave defines model for CSVWave.
type CSVWave struct {
	Labels    *string `json:"labels,omitempty"`
	Name      *string `json:"name,omitempty"`
	TimeStep  *int64  `json:"timeStep,omitempty"`
	ValuesCSV *string `json:"valuesCSV,omitempty"`
}

// These are the common properties available to all queries in all datasources.
// Specific implementations will *extend* this interface, adding the required
// properties for the given context.
type DataQuery struct {
	// For mixed data sources the selected datasource is on the query level.
	// For non mixed scenarios this is undefined.
	// TODO find a better way to do this ^ that's friendly to schema
	// TODO this shouldn't be unknown but DataSourceRef | null
	Datasource *interface{} `json:"datasource,omitempty"`

	// Hide true if query is disabled (ie should not be returned to the dashboard)
	Hide *bool `json:"hide,omitempty"`

	// Unique, guid like, string used in explore mode
	Key *string `json:"key,omitempty"`

	// Specify the query flavor
	// TODO make this required and give it a default
	QueryType *string `json:"queryType,omitempty"`

	// A - Z
	RefId string `json:"refId"`
}

// NodesQuery defines model for NodesQuery.
type NodesQuery struct {
	Count *int64          `json:"count,omitempty"`
	Type  *NodesQueryType `json:"type,omitempty"`
}

// NodesQueryType defines model for NodesQuery.Type.
type NodesQueryType string

// PulseWaveQuery defines model for PulseWaveQuery.
type PulseWaveQuery struct {
	OffCount *int64   `json:"offCount,omitempty"`
	OffValue *float64 `json:"offValue,omitempty"`
	OnCount  *int64   `json:"onCount,omitempty"`
	OnValue  *float64 `json:"onValue,omitempty"`
	TimeStep *int64   `json:"timeStep,omitempty"`
}

// TODO: Should this live here given it's not used in the dataquery?
type Scenario struct {
	Description    *string `json:"description,omitempty"`
	HideAliasField *bool   `json:"hideAliasField,omitempty"`
	Id             string  `json:"id"`
	Name           string  `json:"name"`
	StringInput    string  `json:"stringInput"`
}

// SimulationQuery defines model for SimulationQuery.
type SimulationQuery struct {
	Config map[string]interface{} `json:"config,omitempty"`
	Key    struct {
		Tick float64 `json:"tick"`
		Type string  `json:"type"`
		Uid  *string `json:"uid,omitempty"`
	} `json:"key"`
	Last   *bool `json:"last,omitempty"`
	Stream *bool `json:"stream,omitempty"`
}

// StreamingQuery defines model for StreamingQuery.
type StreamingQuery struct {
	Bands  *int32             `json:"bands,omitempty"`
	Noise  int32              `json:"noise"`
	Speed  int32              `json:"speed"`
	Spread int32              `json:"spread"`
	Type   StreamingQueryType `json:"type"`
	Url    *string            `json:"url,omitempty"`
}

// StreamingQueryType defines model for StreamingQuery.Type.
type StreamingQueryType string

// These are the common properties available to all queries in all datasources.
// Specific implementations will *extend* this interface, adding the required
// properties for the given context.
type TestDataDataQuery = DataQuery

// TestDataQueryType defines model for TestDataQueryType.
type TestDataQueryType string

// USAQuery defines model for USAQuery.
type USAQuery struct {
	Fields []string `json:"fields,omitempty"`
	Mode   *string  `json:"mode,omitempty"`
	Period *string  `json:"period,omitempty"`
	States []string `json:"states,omitempty"`
}
