// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     go
// Using jennies:
//     GoTypesJenny
//     ComposableLatestMajorsOrXJenny
//
// Run 'go generate ./' from repository root to regenerate.

package cloudwatchdataquery

// Defines values for CloudWatchQueryMode.
const (
	CloudWatchQueryModeAnnotations CloudWatchQueryMode = "Annotations"
	CloudWatchQueryModeLogs        CloudWatchQueryMode = "Logs"
	CloudWatchQueryModeMetrics     CloudWatchQueryMode = "Metrics"
)

// Defines values for MetricEditorMode.
const (
	MetricEditorModeN0 MetricEditorMode = 0
	MetricEditorModeN1 MetricEditorMode = 1
)

// Defines values for MetricQueryType.
const (
	MetricQueryTypeN0 MetricQueryType = 0
	MetricQueryTypeN1 MetricQueryType = 1
)

// Defines values for QueryEditorArrayExpressionType.
const (
	QueryEditorArrayExpressionTypeAnd QueryEditorArrayExpressionType = "and"
	QueryEditorArrayExpressionTypeOr  QueryEditorArrayExpressionType = "or"
)

// Defines values for QueryEditorExpressionType.
const (
	QueryEditorExpressionTypeAnd               QueryEditorExpressionType = "and"
	QueryEditorExpressionTypeFunction          QueryEditorExpressionType = "function"
	QueryEditorExpressionTypeFunctionParameter QueryEditorExpressionType = "functionParameter"
	QueryEditorExpressionTypeGroupBy           QueryEditorExpressionType = "groupBy"
	QueryEditorExpressionTypeOperator          QueryEditorExpressionType = "operator"
	QueryEditorExpressionTypeOr                QueryEditorExpressionType = "or"
	QueryEditorExpressionTypeProperty          QueryEditorExpressionType = "property"
)

// Defines values for QueryEditorFunctionExpressionType.
const (
	QueryEditorFunctionExpressionTypeAnd               QueryEditorFunctionExpressionType = "and"
	QueryEditorFunctionExpressionTypeFunction          QueryEditorFunctionExpressionType = "function"
	QueryEditorFunctionExpressionTypeFunctionParameter QueryEditorFunctionExpressionType = "functionParameter"
	QueryEditorFunctionExpressionTypeGroupBy           QueryEditorFunctionExpressionType = "groupBy"
	QueryEditorFunctionExpressionTypeOperator          QueryEditorFunctionExpressionType = "operator"
	QueryEditorFunctionExpressionTypeOr                QueryEditorFunctionExpressionType = "or"
	QueryEditorFunctionExpressionTypeProperty          QueryEditorFunctionExpressionType = "property"
)

// Defines values for QueryEditorFunctionParameterExpressionType.
const (
	QueryEditorFunctionParameterExpressionTypeAnd               QueryEditorFunctionParameterExpressionType = "and"
	QueryEditorFunctionParameterExpressionTypeFunction          QueryEditorFunctionParameterExpressionType = "function"
	QueryEditorFunctionParameterExpressionTypeFunctionParameter QueryEditorFunctionParameterExpressionType = "functionParameter"
	QueryEditorFunctionParameterExpressionTypeGroupBy           QueryEditorFunctionParameterExpressionType = "groupBy"
	QueryEditorFunctionParameterExpressionTypeOperator          QueryEditorFunctionParameterExpressionType = "operator"
	QueryEditorFunctionParameterExpressionTypeOr                QueryEditorFunctionParameterExpressionType = "or"
	QueryEditorFunctionParameterExpressionTypeProperty          QueryEditorFunctionParameterExpressionType = "property"
)

// Defines values for QueryEditorGroupByExpressionType.
const (
	QueryEditorGroupByExpressionTypeAnd               QueryEditorGroupByExpressionType = "and"
	QueryEditorGroupByExpressionTypeFunction          QueryEditorGroupByExpressionType = "function"
	QueryEditorGroupByExpressionTypeFunctionParameter QueryEditorGroupByExpressionType = "functionParameter"
	QueryEditorGroupByExpressionTypeGroupBy           QueryEditorGroupByExpressionType = "groupBy"
	QueryEditorGroupByExpressionTypeOperator          QueryEditorGroupByExpressionType = "operator"
	QueryEditorGroupByExpressionTypeOr                QueryEditorGroupByExpressionType = "or"
	QueryEditorGroupByExpressionTypeProperty          QueryEditorGroupByExpressionType = "property"
)

// Defines values for QueryEditorOperatorExpressionType.
const (
	QueryEditorOperatorExpressionTypeAnd               QueryEditorOperatorExpressionType = "and"
	QueryEditorOperatorExpressionTypeFunction          QueryEditorOperatorExpressionType = "function"
	QueryEditorOperatorExpressionTypeFunctionParameter QueryEditorOperatorExpressionType = "functionParameter"
	QueryEditorOperatorExpressionTypeGroupBy           QueryEditorOperatorExpressionType = "groupBy"
	QueryEditorOperatorExpressionTypeOperator          QueryEditorOperatorExpressionType = "operator"
	QueryEditorOperatorExpressionTypeOr                QueryEditorOperatorExpressionType = "or"
	QueryEditorOperatorExpressionTypeProperty          QueryEditorOperatorExpressionType = "property"
)

// Defines values for QueryEditorPropertyExpressionType.
const (
	QueryEditorPropertyExpressionTypeAnd               QueryEditorPropertyExpressionType = "and"
	QueryEditorPropertyExpressionTypeFunction          QueryEditorPropertyExpressionType = "function"
	QueryEditorPropertyExpressionTypeFunctionParameter QueryEditorPropertyExpressionType = "functionParameter"
	QueryEditorPropertyExpressionTypeGroupBy           QueryEditorPropertyExpressionType = "groupBy"
	QueryEditorPropertyExpressionTypeOperator          QueryEditorPropertyExpressionType = "operator"
	QueryEditorPropertyExpressionTypeOr                QueryEditorPropertyExpressionType = "or"
	QueryEditorPropertyExpressionTypeProperty          QueryEditorPropertyExpressionType = "property"
)

// Defines values for QueryEditorPropertyType.
const (
	QueryEditorPropertyTypeString QueryEditorPropertyType = "string"
)

// CloudWatchAnnotationQuery defines model for CloudWatchAnnotationQuery.
type CloudWatchAnnotationQuery struct {
	AccountId *string `json:"accountId,omitempty"`

	// For mixed data sources the selected datasource is on the query level.
	// For non mixed scenarios this is undefined.
	// TODO find a better way to do this ^ that's friendly to schema
	// TODO this shouldn't be unknown but DataSourceRef | null
	Datasource *interface{} `json:"datasource,omitempty"`
	Dimensions *Dimensions  `json:"dimensions,omitempty"`

	// Hide true if query is disabled (ie should not be returned to the dashboard)
	// Note this does not always imply that the query should not be executed since
	// the results from a hidden query may be used as the input to other queries (SSE etc)
	Hide       *bool   `json:"hide,omitempty"`
	MatchExact *bool   `json:"matchExact,omitempty"`
	MetricName *string `json:"metricName,omitempty"`
	Namespace  string  `json:"namespace"`
	Period     *string `json:"period,omitempty"`

	// Specify the query flavor
	// TODO make this required and give it a default
	QueryType *string `json:"queryType,omitempty"`

	// A unique identifier for the query within the list of targets.
	// In server side expressions, the refId is used as a variable name to identify results.
	// By default, the UI will assign A->Z; however setting meaningful names may be useful.
	RefId     string  `json:"refId"`
	Region    string  `json:"region"`
	Statistic *string `json:"statistic,omitempty"`

	// @deprecated use statistic
	Statistics []string `json:"statistics,omitempty"`
}

// CloudWatchDataQuery defines model for CloudWatchDataQuery.
type CloudWatchDataQuery = map[string]interface{}

// CloudWatchLogsQuery defines model for CloudWatchLogsQuery.
type CloudWatchLogsQuery struct {
	// For mixed data sources the selected datasource is on the query level.
	// For non mixed scenarios this is undefined.
	// TODO find a better way to do this ^ that's friendly to schema
	// TODO this shouldn't be unknown but DataSourceRef | null
	Datasource *interface{} `json:"datasource,omitempty"`

	// Hide true if query is disabled (ie should not be returned to the dashboard)
	// Note this does not always imply that the query should not be executed since
	// the results from a hidden query may be used as the input to other queries (SSE etc)
	Hide *bool `json:"hide,omitempty"`

	// Specify the query flavor
	// TODO make this required and give it a default
	QueryType *string `json:"queryType,omitempty"`

	// A unique identifier for the query within the list of targets.
	// In server side expressions, the refId is used as a variable name to identify results.
	// By default, the UI will assign A->Z; however setting meaningful names may be useful.
	RefId string `json:"refId"`
}

// CloudWatchMetricsQuery defines model for CloudWatchMetricsQuery.
type CloudWatchMetricsQuery struct {
	AccountId *string `json:"accountId,omitempty"`

	// For mixed data sources the selected datasource is on the query level.
	// For non mixed scenarios this is undefined.
	// TODO find a better way to do this ^ that's friendly to schema
	// TODO this shouldn't be unknown but DataSourceRef | null
	Datasource *interface{} `json:"datasource,omitempty"`
	Dimensions *Dimensions  `json:"dimensions,omitempty"`

	// Hide true if query is disabled (ie should not be returned to the dashboard)
	// Note this does not always imply that the query should not be executed since
	// the results from a hidden query may be used as the input to other queries (SSE etc)
	Hide       *bool   `json:"hide,omitempty"`
	MatchExact *bool   `json:"matchExact,omitempty"`
	MetricName *string `json:"metricName,omitempty"`
	Namespace  string  `json:"namespace"`
	Period     *string `json:"period,omitempty"`

	// Specify the query flavor
	// TODO make this required and give it a default
	QueryType *string `json:"queryType,omitempty"`

	// A unique identifier for the query within the list of targets.
	// In server side expressions, the refId is used as a variable name to identify results.
	// By default, the UI will assign A->Z; however setting meaningful names may be useful.
	RefId     string  `json:"refId"`
	Region    string  `json:"region"`
	Statistic *string `json:"statistic,omitempty"`

	// @deprecated use statistic
	Statistics []string `json:"statistics,omitempty"`
}

// CloudWatchQueryMode defines model for CloudWatchQueryMode.
type CloudWatchQueryMode string

// These are the common properties available to all queries in all datasources.
// Specific implementations will *extend* this interface, adding the required
// properties for the given context.
type DataQuery struct {
	// For mixed data sources the selected datasource is on the query level.
	// For non mixed scenarios this is undefined.
	// TODO find a better way to do this ^ that's friendly to schema
	// TODO this shouldn't be unknown but DataSourceRef | null
	Datasource *interface{} `json:"datasource,omitempty"`

	// Hide true if query is disabled (ie should not be returned to the dashboard)
	// Note this does not always imply that the query should not be executed since
	// the results from a hidden query may be used as the input to other queries (SSE etc)
	Hide *bool `json:"hide,omitempty"`

	// Specify the query flavor
	// TODO make this required and give it a default
	QueryType *string `json:"queryType,omitempty"`

	// A unique identifier for the query within the list of targets.
	// In server side expressions, the refId is used as a variable name to identify results.
	// By default, the UI will assign A->Z; however setting meaningful names may be useful.
	RefId string `json:"refId"`
}

// Dimensions defines model for Dimensions.
type Dimensions map[string]interface{}

// LogGroup defines model for LogGroup.
type LogGroup struct {
	AccountId    *string `json:"accountId,omitempty"`
	AccountLabel *string `json:"accountLabel,omitempty"`
	Arn          string  `json:"arn"`
	Name         string  `json:"name"`
}

// MetricEditorMode defines model for MetricEditorMode.
type MetricEditorMode int

// MetricQueryType defines model for MetricQueryType.
type MetricQueryType int

// MetricStat defines model for MetricStat.
type MetricStat struct {
	AccountId  *string     `json:"accountId,omitempty"`
	Dimensions *Dimensions `json:"dimensions,omitempty"`
	MatchExact *bool       `json:"matchExact,omitempty"`
	MetricName *string     `json:"metricName,omitempty"`
	Namespace  string      `json:"namespace"`
	Period     *string     `json:"period,omitempty"`
	Region     string      `json:"region"`
	Statistic  *string     `json:"statistic,omitempty"`

	// @deprecated use statistic
	Statistics []string `json:"statistics,omitempty"`
}

// QueryEditorArrayExpression defines model for QueryEditorArrayExpression.
type QueryEditorArrayExpression struct {
	// TS type expressions: QueryEditorExpression[] | QueryEditorArrayExpression[], extended in veneer
	Expressions interface{} `json:"expressions"`

	// TODO this doesn't work; temporarily extended in veneer
	Type QueryEditorArrayExpressionType `json:"type"`
}

// TODO this doesn't work; temporarily extended in veneer
type QueryEditorArrayExpressionType string

// QueryEditorExpressionType defines model for QueryEditorExpressionType.
type QueryEditorExpressionType string

// QueryEditorFunctionExpression defines model for QueryEditorFunctionExpression.
type QueryEditorFunctionExpression struct {
	Name       *string                                  `json:"name,omitempty"`
	Parameters []QueryEditorFunctionParameterExpression `json:"parameters,omitempty"`
	Type       QueryEditorFunctionExpressionType        `json:"type"`
}

// QueryEditorFunctionExpressionType defines model for QueryEditorFunctionExpression.Type.
type QueryEditorFunctionExpressionType string

// QueryEditorFunctionParameterExpression defines model for QueryEditorFunctionParameterExpression.
type QueryEditorFunctionParameterExpression struct {
	Name *string                                    `json:"name,omitempty"`
	Type QueryEditorFunctionParameterExpressionType `json:"type"`
}

// QueryEditorFunctionParameterExpressionType defines model for QueryEditorFunctionParameterExpression.Type.
type QueryEditorFunctionParameterExpressionType string

// QueryEditorGroupByExpression defines model for QueryEditorGroupByExpression.
type QueryEditorGroupByExpression struct {
	Property QueryEditorProperty              `json:"property"`
	Type     QueryEditorGroupByExpressionType `json:"type"`
}

// QueryEditorGroupByExpressionType defines model for QueryEditorGroupByExpression.Type.
type QueryEditorGroupByExpressionType string

// TS type is QueryEditorOperator<T extends QueryEditorOperatorValueType>, extended in veneer
type QueryEditorOperator struct {
	Name  *string      `json:"name,omitempty"`
	Value *interface{} `json:"value,omitempty"`
}

// QueryEditorOperatorExpression defines model for QueryEditorOperatorExpression.
type QueryEditorOperatorExpression struct {
	// TS type is QueryEditorOperator<T extends QueryEditorOperatorValueType>, extended in veneer
	Operator QueryEditorOperator               `json:"operator"`
	Property QueryEditorProperty               `json:"property"`
	Type     QueryEditorOperatorExpressionType `json:"type"`
}

// QueryEditorOperatorExpressionType defines model for QueryEditorOperatorExpression.Type.
type QueryEditorOperatorExpressionType string

// QueryEditorProperty defines model for QueryEditorProperty.
type QueryEditorProperty struct {
	Name *string                 `json:"name,omitempty"`
	Type QueryEditorPropertyType `json:"type"`
}

// QueryEditorPropertyExpression defines model for QueryEditorPropertyExpression.
type QueryEditorPropertyExpression struct {
	Property QueryEditorProperty               `json:"property"`
	Type     QueryEditorPropertyExpressionType `json:"type"`
}

// QueryEditorPropertyExpressionType defines model for QueryEditorPropertyExpression.Type.
type QueryEditorPropertyExpressionType string

// QueryEditorPropertyType defines model for QueryEditorPropertyType.
type QueryEditorPropertyType string

// SQLExpression defines model for SQLExpression.
type SQLExpression struct {
	From             *interface{}                   `json:"from,omitempty"`
	GroupBy          *QueryEditorArrayExpression    `json:"groupBy,omitempty"`
	Limit            *int64                         `json:"limit,omitempty"`
	OrderBy          *QueryEditorFunctionExpression `json:"orderBy,omitempty"`
	OrderByDirection *string                        `json:"orderByDirection,omitempty"`
	Select           *QueryEditorFunctionExpression `json:"select,omitempty"`
	Where            *QueryEditorArrayExpression    `json:"where,omitempty"`
}
