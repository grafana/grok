// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     go
// Using jennies:
//     GoTypesJenny
//     ComposableLatestMajorsOrXJenny
//
// Run 'go generate ./' from repository root to regenerate.

package geomappanelcfg

// Defines values for FrameGeometrySourceMode.
const (
	FrameGeometrySourceModeAuto    FrameGeometrySourceMode = "auto"
	FrameGeometrySourceModeCoords  FrameGeometrySourceMode = "coords"
	FrameGeometrySourceModeGeohash FrameGeometrySourceMode = "geohash"
	FrameGeometrySourceModeLookup  FrameGeometrySourceMode = "lookup"
)

// Defines values for MapCenterID.
const (
	MapCenterIDCoords MapCenterID = "coords"
	MapCenterIDFit    MapCenterID = "fit"
	MapCenterIDZero   MapCenterID = "zero"
)

// Defines values for TooltipMode.
const (
	TooltipModeDetails TooltipMode = "details"
	TooltipModeNone    TooltipMode = "none"
)

// ControlsOptions defines model for ControlsOptions.
type ControlsOptions struct {
	// MouseWheelZoom let the mouse wheel zoom
	MouseWheelZoom *bool `json:"mouseWheelZoom,omitempty"`

	// Lower right
	ShowAttribution *bool `json:"showAttribution,omitempty"`

	// Show debug
	ShowDebug *bool `json:"showDebug,omitempty"`

	// Show measure
	ShowMeasure *bool `json:"showMeasure,omitempty"`

	// Scale options
	ShowScale *bool `json:"showScale,omitempty"`

	// Zoom (upper left)
	ShowZoom *bool `json:"showZoom,omitempty"`
}

// FrameGeometrySource defines model for FrameGeometrySource.
type FrameGeometrySource struct {
	// Path to Gazetteer
	Gazetteer *string `json:"gazetteer,omitempty"`

	// Field mappings
	Geohash   *string                 `json:"geohash,omitempty"`
	Latitude  *string                 `json:"latitude,omitempty"`
	Longitude *string                 `json:"longitude,omitempty"`
	Lookup    *string                 `json:"lookup,omitempty"`
	Mode      FrameGeometrySourceMode `json:"mode"`
	Wkt       *string                 `json:"wkt,omitempty"`
}

// FrameGeometrySourceMode defines model for FrameGeometrySourceMode.
type FrameGeometrySourceMode string

// MapCenterID defines model for MapCenterID.
type MapCenterID string

// MapLayerOptions defines model for MapLayerOptions.
type MapLayerOptions struct {
	// Custom options depending on the type
	Config *interface{} `json:"config,omitempty"`

	// Defines a frame MatcherConfig that may filter data for the given layer
	FilterData *interface{}         `json:"filterData,omitempty"`
	Location   *FrameGeometrySource `json:"location,omitempty"`

	// Name configured unique display name
	Name string `json:"name"`

	// Common properties:
	// https://openlayers.org/en/latest/apidoc/module-ol_layer_Base-BaseLayer.html
	// Layer opacity (0-1)
	Opacity *int64 `json:"opacity,omitempty"`

	// Check tooltip (defaults to true)
	Tooltip *bool  `json:"tooltip,omitempty"`
	Type    string `json:"type"`
}

// MapViewConfig defines model for MapViewConfig.
type MapViewConfig struct {
	AllLayers *bool   `json:"allLayers,omitempty"`
	Id        string  `json:"id"`
	LastOnly  *bool   `json:"lastOnly,omitempty"`
	Lat       *int    `json:"lat,omitempty"`
	Layer     *string `json:"layer,omitempty"`
	Lon       *int    `json:"lon,omitempty"`
	MaxZoom   *int64  `json:"maxZoom,omitempty"`
	MinZoom   *int64  `json:"minZoom,omitempty"`
	Padding   *int64  `json:"padding,omitempty"`
	Shared    *bool   `json:"shared,omitempty"`
	Zoom      *int    `json:"zoom,omitempty"`
}

// PanelOptions defines model for PanelOptions.
type PanelOptions struct {
	Basemap  MapLayerOptions   `json:"basemap"`
	Controls ControlsOptions   `json:"controls"`
	Layers   []MapLayerOptions `json:"layers"`
	Tooltip  TooltipOptions    `json:"tooltip"`
	View     MapViewConfig     `json:"view"`
}

// TooltipMode defines model for TooltipMode.
type TooltipMode string

// TooltipOptions defines model for TooltipOptions.
type TooltipOptions struct {
	Mode TooltipMode `json:"mode"`
}
