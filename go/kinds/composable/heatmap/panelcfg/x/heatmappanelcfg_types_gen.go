// Code generated - EDITING IS FUTILE. DO NOT EDIT.
//
// Generated by pipeline:
//     go
// Using jennies:
//     GoTypesJenny
//     ComposableLatestMajorsOrXJenny
//
// Run 'go generate ./' from repository root to regenerate.

package heatmappanelcfg

// Defines values for AxisColorMode.
const (
	AxisColorModeSeries AxisColorMode = "series"
	AxisColorModeText   AxisColorMode = "text"
)

// Defines values for AxisPlacement.
const (
	AxisPlacementAuto   AxisPlacement = "auto"
	AxisPlacementBottom AxisPlacement = "bottom"
	AxisPlacementHidden AxisPlacement = "hidden"
	AxisPlacementLeft   AxisPlacement = "left"
	AxisPlacementRight  AxisPlacement = "right"
	AxisPlacementTop    AxisPlacement = "top"
)

// Defines values for HeatmapCalculationMode.
const (
	HeatmapCalculationModeCount HeatmapCalculationMode = "count"
	HeatmapCalculationModeSize  HeatmapCalculationMode = "size"
)

// Defines values for HeatmapCellLayout.
const (
	HeatmapCellLayoutAuto    HeatmapCellLayout = "auto"
	HeatmapCellLayoutGe      HeatmapCellLayout = "ge"
	HeatmapCellLayoutLe      HeatmapCellLayout = "le"
	HeatmapCellLayoutUnknown HeatmapCellLayout = "unknown"
)

// Defines values for HeatmapColorMode.
const (
	HeatmapColorModeOpacity HeatmapColorMode = "opacity"
	HeatmapColorModeScheme  HeatmapColorMode = "scheme"
)

// Defines values for HeatmapColorScale.
const (
	HeatmapColorScaleExponential HeatmapColorScale = "exponential"
	HeatmapColorScaleLinear      HeatmapColorScale = "linear"
)

// Defines values for ScaleDistribution.
const (
	ScaleDistributionLinear  ScaleDistribution = "linear"
	ScaleDistributionLog     ScaleDistribution = "log"
	ScaleDistributionOrdinal ScaleDistribution = "ordinal"
	ScaleDistributionSymlog  ScaleDistribution = "symlog"
)

// Defines values for VisibilityMode.
const (
	VisibilityModeAlways VisibilityMode = "always"
	VisibilityModeAuto   VisibilityMode = "auto"
	VisibilityModeNever  VisibilityMode = "never"
)

// TODO docs
type AxisColorMode string

// TODO docs
type AxisConfig struct {
	AxisCenteredZero *bool `json:"axisCenteredZero,omitempty"`

	// TODO docs
	AxisColorMode *AxisColorMode `json:"axisColorMode,omitempty"`
	AxisGridShow  *bool          `json:"axisGridShow,omitempty"`
	AxisLabel     *string        `json:"axisLabel,omitempty"`

	// TODO docs
	AxisPlacement *AxisPlacement `json:"axisPlacement,omitempty"`
	AxisSoftMax   *float32       `json:"axisSoftMax,omitempty"`
	AxisSoftMin   *float32       `json:"axisSoftMin,omitempty"`
	AxisWidth     *float32       `json:"axisWidth,omitempty"`

	// TODO docs
	ScaleDistribution *ScaleDistributionConfig `json:"scaleDistribution,omitempty"`
}

// TODO docs
type AxisPlacement string

// Controls cell value options
type CellValues struct {
	// Controls the number of decimals for cell values
	Decimals *float32 `json:"decimals,omitempty"`

	// Controls the cell value unit
	Unit *string `json:"unit,omitempty"`
}

// Controls exemplar options
type ExemplarConfig struct {
	// Sets the color of the exemplar markers
	Color string `json:"color"`
}

// Controls the value filter range
type FilterValueRange struct {
	// Sets the filter range to values greater than or equal to the given value
	Ge *float32 `json:"ge,omitempty"`

	// Sets the filter range to values less than or equal to the given value
	Le *float32 `json:"le,omitempty"`
}

// HeatmapCalculationBucketConfig defines model for HeatmapCalculationBucketConfig.
type HeatmapCalculationBucketConfig struct {
	Mode *HeatmapCalculationMode `json:"mode,omitempty"`

	// TODO docs
	Scale *ScaleDistributionConfig `json:"scale,omitempty"`

	// The number of buckets to use for the axis in the heatmap
	Value *string `json:"value,omitempty"`
}

// HeatmapCalculationMode defines model for HeatmapCalculationMode.
type HeatmapCalculationMode string

// HeatmapCalculationOptions defines model for HeatmapCalculationOptions.
type HeatmapCalculationOptions struct {
	XBuckets *HeatmapCalculationBucketConfig `json:"xBuckets,omitempty"`
	YBuckets *HeatmapCalculationBucketConfig `json:"yBuckets,omitempty"`
}

// HeatmapCellLayout defines model for HeatmapCellLayout.
type HeatmapCellLayout string

// Controls the color mode of the heatmap
type HeatmapColorMode string

// Controls various color options
type HeatmapColorOptions struct {
	// Controls the exponent when scale is set to exponential
	Exponent float32 `json:"exponent"`

	// Controls the color fill when in opacity mode
	Fill string `json:"fill"`

	// Sets the maximum value for the color scale
	Max *float32 `json:"max,omitempty"`

	// Sets the minimum value for the color scale
	Min *float32 `json:"min,omitempty"`

	// Controls the color mode of the heatmap
	Mode *HeatmapColorMode `json:"mode,omitempty"`

	// Reverses the color scheme
	Reverse bool `json:"reverse"`

	// Controls the color scale of the heatmap
	Scale *HeatmapColorScale `json:"scale,omitempty"`

	// Controls the color scheme used
	Scheme string `json:"scheme"`

	// Controls the number of color steps
	Steps int `json:"steps"`
}

// Controls the color scale of the heatmap
type HeatmapColorScale string

// Controls legend options
type HeatmapLegend struct {
	// Controls if the legend is shown
	Show bool `json:"show"`
}

// Controls tooltip options
type HeatmapTooltip struct {
	// Controls if the tooltip is shown
	Show bool `json:"show"`

	// Controls if the tooltip shows a histogram of the y-axis values
	YHistogram *bool `json:"yHistogram,omitempty"`
}

// TODO docs
type HideSeriesConfig struct {
	Legend  bool `json:"legend"`
	Tooltip bool `json:"tooltip"`
	Viz     bool `json:"viz"`
}

// TODO docs
type HideableFieldConfig struct {
	// TODO docs
	HideFrom *HideSeriesConfig `json:"hideFrom,omitempty"`
}

// TODO docs
type PanelFieldConfig = HideableFieldConfig

// PanelOptions defines model for PanelOptions.
type PanelOptions struct {
	// Controls if the heatmap should be calculated from data
	Calculate   *bool                      `json:"calculate,omitempty"`
	Calculation *HeatmapCalculationOptions `json:"calculation,omitempty"`

	// Controls gap between cells
	CellGap *int `json:"cellGap,omitempty"`

	// Controls cell radius
	CellRadius *float32 `json:"cellRadius,omitempty"`

	// Controls cell value unit
	CellValues *interface{} `json:"cellValues,omitempty"`

	// Controls the color options
	Color interface{} `json:"color"`

	// Controls exemplar options
	Exemplars ExemplarConfig `json:"exemplars"`

	// Filters values between a given range
	FilterValues *interface{} `json:"filterValues,omitempty"`

	// Controls legend options
	Legend HeatmapLegend `json:"legend"`

	// Controls frame rows options
	RowsFrame *RowsHeatmapOptions `json:"rowsFrame,omitempty"`

	// TODO docs
	ShowValue VisibilityMode `json:"showValue"`

	// Controls tooltip options
	Tooltip HeatmapTooltip `json:"tooltip"`

	// Configuration options for the yAxis
	YAxis YAxisConfig `json:"yAxis"`
}

// Controls frame rows options
type RowsHeatmapOptions struct {
	Layout *HeatmapCellLayout `json:"layout,omitempty"`

	// Sets the name of the cell when not calculating from data
	Value *string `json:"value,omitempty"`
}

// TODO docs
type ScaleDistribution string

// TODO docs
type ScaleDistributionConfig struct {
	LinearThreshold *float32 `json:"linearThreshold,omitempty"`
	Log             *float32 `json:"log,omitempty"`

	// TODO docs
	Type ScaleDistribution `json:"type"`
}

// TODO docs
type VisibilityMode string

// TODO docs
type YAxisConfig = AxisConfig
