import * as types from "../panel_types_gen";
import { OptionsBuilder } from "../options_builder_gen";

export class PanelBuilder implements OptionsBuilder<types.Panel> {
	internal: types.Panel;

	build(): types.Panel {
		return this.internal;
	}

	// The panel plugin type id. This is used to find the plugin to display the panel.
	withType(type: string): this {
		if (!(type.length >= 1)) {
			throw new Error("type must be minLength 1");
		}

		this.internal.type = type;

		return this;
	}

	// Unique identifier of the panel. Generated by Grafana when creating a new panel. It must be unique within a dashboard, but not globally.
	withId(id: number): this {
		
		this.internal.id = id;

		return this;
	}

	// The version of the plugin that is used for this panel. This is used to find the plugin to display the panel and to migrate old panel configs.
	withPluginVersion(pluginVersion: string): this {
		
		this.internal.pluginVersion = pluginVersion;

		return this;
	}

	// Tags for the panel.
	withTags(tags: string[]): this {
		
		this.internal.tags = tags;

		return this;
	}

	// Depends on the panel plugin. See the plugin documentation for details.
	withTargets(targets: types.Target[]): this {
		
		this.internal.targets = targets;

		return this;
	}

	// Panel title.
	withTitle(title: string): this {
		
		this.internal.title = title;

		return this;
	}

	// Panel description.
	withDescription(description: string): this {
		
		this.internal.description = description;

		return this;
	}

	// Whether to display the panel without a background.
	withTransparent(transparent: boolean): this {
		
		this.internal.transparent = transparent;

		return this;
	}

	withDatasource(builder: OptionsBuilder<types.DataSourceRef>): this {
		this.internal.datasource = builder.build();

		return this;
	}

	withGridPos(builder: OptionsBuilder<types.GridPos>): this {
		this.internal.gridPos = builder.build();

		return this;
	}

	// Panel links.
	withLinks(links: types.DashboardLink[]): this {
		
		this.internal.links = links;

		return this;
	}

	// Name of template variable to repeat for.
	withRepeat(repeat: string): this {
		
		this.internal.repeat = repeat;

		return this;
	}

	// Direction to repeat in if 'repeat' is set.
	// `h` for horizontal, `v` for vertical.
	withRepeatDirection(repeatDirection: types.PanelRepeatDirection): this {
		
		this.internal.repeatDirection = repeatDirection;

		return this;
	}

	// Id of the repeating panel.
	withRepeatPanelId(repeatPanelId: number): this {
		
		this.internal.repeatPanelId = repeatPanelId;

		return this;
	}

	// The maximum number of data points that the panel queries are retrieving.
	withMaxDataPoints(maxDataPoints: number): this {
		
		this.internal.maxDataPoints = maxDataPoints;

		return this;
	}

	// List of transformations that are applied to the panel data before rendering.
	// When there are multiple transformations, Grafana applies them in the order they are listed.
	// Each transformation creates a result set that then passes on to the next transformation in the processing pipeline.
	withTransformations(transformations: types.DataTransformerConfig[]): this {
		
		this.internal.transformations = transformations;

		return this;
	}

	// The min time interval setting defines a lower limit for the $__interval and $__interval_ms variables.
	// This value must be formatted as a number followed by a valid time
	// identifier like: "40s", "3d", etc.
	// See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options
	withInterval(interval: string): this {
		
		this.internal.interval = interval;

		return this;
	}

	// Overrides the relative time range for individual panels,
	// which causes them to be different than what is selected in
	// the dashboard time picker in the top-right corner of the dashboard. You can use this to show metrics from different
	// time periods or days on the same dashboard.
	// The value is formatted as time operation like: `now-5m` (Last 5 minutes), `now/d` (the day so far),
	// `now-5d/d`(Last 5 days), `now/w` (This week so far), `now-2y/y` (Last 2 years).
	// Note: Panel time overrides have no effect when the dashboard’s time range is absolute.
	// See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options
	withTimeFrom(timeFrom: string): this {
		
		this.internal.timeFrom = timeFrom;

		return this;
	}

	// Overrides the time range for individual panels by shifting its start and end relative to the time picker.
	// For example, you can shift the time range for the panel to be two hours earlier than the dashboard time picker setting `2h`.
	// Note: Panel time overrides have no effect when the dashboard’s time range is absolute.
	// See: https://grafana.com/docs/grafana/latest/panels-visualizations/query-transform-data/#query-options
	withTimeShift(timeShift: string): this {
		
		this.internal.timeShift = timeShift;

		return this;
	}

	withLibraryPanel(builder: OptionsBuilder<types.LibraryPanelRef>): this {
		this.internal.libraryPanel = builder.build();

		return this;
	}

	// It depends on the panel plugin. They are specified by the Options field in panel plugin schemas.
	withOptions(options: any): this {
		
		this.internal.options = options;

		return this;
	}

	withFieldConfig(builder: OptionsBuilder<types.FieldConfigSource>): this {
		this.internal.fieldConfig = builder.build();

		return this;
	}

}
