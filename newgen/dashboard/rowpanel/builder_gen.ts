import * as types from "../rowpanel_types_gen";
import { OptionsBuilder } from "../options_builder_gen";

export class RowPanelBuilder implements OptionsBuilder<types.RowPanel> {
	internal: types.RowPanel;

	build(): types.RowPanel {
		return this.internal;
	}

	// The panel type
	withType(type: string): this {
		
		this.internal.type = type;

		return this;
	}

	// Whether this row should be collapsed or not.
	withCollapsed(collapsed: boolean): this {
		
		this.internal.collapsed = collapsed;

		return this;
	}

	// Row title
	withTitle(title: string): this {
		
		this.internal.title = title;

		return this;
	}

	withDatasource(builder: OptionsBuilder<types.DataSourceRef>): this {
		this.internal.datasource = builder.build();

		return this;
	}

	withGridPos(builder: OptionsBuilder<types.GridPos>): this {
		this.internal.gridPos = builder.build();

		return this;
	}

	// Unique identifier of the panel. Generated by Grafana when creating a new panel. It must be unique within a dashboard, but not globally.
	withId(id: number): this {
		
		this.internal.id = id;

		return this;
	}

	// List of panels in the row
	withPanels(panels: types.Panel[]): this {
		
		this.internal.panels = panels;

		return this;
	}

	// Name of template variable to repeat for.
	withRepeat(repeat: string): this {
		
		this.internal.repeat = repeat;

		return this;
	}

}
