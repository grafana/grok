import {Dashboard} from "../dashboard_types_gen";

export class DashboardBuilder extends OptionsBuilder<Dashboard> {
	internal: Dashboard;

	build(): Dashboard {
		return this.internal;
	}

	// Unique numeric identifier for the dashboard.
	// `id` is internal to a specific Grafana instance. `uid` should be used to identify a dashboard across Grafana instances.
	withId(id: number | null): this {
		
		this.internal.id = id;

		return this;
	}

	// Unique dashboard identifier that can be generated by anyone. string (8-40)
	withUid(uid: string): this {
		
		this.internal.uid = uid;

		return this;
	}

	// Title of dashboard.
	withTitle(title: string): this {
		
		this.internal.title = title;

		return this;
	}

	// Description of dashboard.
	withDescription(description: string): this {
		
		this.internal.description = description;

		return this;
	}

	// This property should only be used in dashboards defined by plugins.  It is a quick check
	// to see if the version has changed since the last time.
	withRevision(revision: number): this {
		
		this.internal.revision = revision;

		return this;
	}

	// ID of a dashboard imported from the https://grafana.com/grafana/dashboards/ portal
	withGnetId(gnetId: string): this {
		
		this.internal.gnetId = gnetId;

		return this;
	}

	// Tags associated with dashboard.
	withTags(tags: string[]): this {
		
		this.internal.tags = tags;

		return this;
	}

	// Theme of dashboard.
	withStyle(style: "light" | "dark"): this {
		
		this.internal.style = style;

		return this;
	}

	// Timezone of dashboard. Accepted values are IANA TZDB zone ID or "browser" or "utc".
	withTimezone(timezone: string): this {
		
		this.internal.timezone = timezone;

		return this;
	}

	withReadonly(): this {
		this.internal.editable = true;

		return this;
	}

	withEditable(): this {
		this.internal.editable = false;

		return this;
	}

	// Configuration of dashboard cursor sync behavior.
	// Accepted values are 0 (sync turned off), 1 (shared crosshair), 2 (shared crosshair and tooltip).
	withTooltip(tooltip: DashboardCursorSync): this {
		
		this.internal.graphTooltip = tooltip;

		return this;
	}

	// Time range for dashboard.
	// Accepted values are relative time strings like {from: 'now-6h', to: 'now'} or absolute time strings like {from: '2020-07-10T08:00:00.000Z', to: '2020-07-10T14:00:00.000Z'}.
	withTime(time: {
	from: string;
	to: string;
}): this {
		
		this.internal.time = time;

		return this;
	}

	// Configuration of the time picker shown at the top of a dashboard.
	withTimepicker(timepicker: TimePicker): this {
		
		this.internal.timepicker = timepicker;

		return this;
	}

	// The month that the fiscal year starts on.  0 = January, 11 = December
	withFiscalYearStartMonth(fiscalYearStartMonth: number): this {
		if (!(fiscalYearStartMonth < 12)) {
			throw new Error("fiscalYearStartMonth must be < 12");
		}

		this.internal.fiscalYearStartMonth = fiscalYearStartMonth;

		return this;
	}

	// When set to true, the dashboard will redraw panels at an interval matching the pixel width.
	// This will keep data "moving left" regardless of the query refresh rate. This setting helps
	// avoid dashboards presenting stale live data
	withLiveNow(liveNow: boolean): this {
		
		this.internal.liveNow = liveNow;

		return this;
	}

	// Day when the week starts. Expressed by the name of the day in lowercase, e.g. "monday".
	withWeekStart(weekStart: string): this {
		
		this.internal.weekStart = weekStart;

		return this;
	}

	// Refresh rate of dashboard. Represented via interval string, e.g. "5s", "1m", "1h", "1d".
	withRefresh(refresh: string | boolean): this {
		
		this.internal.refresh = refresh;

		return this;
	}

	// Version of the dashboard, incremented each time the dashboard is updated.
	withVersion(version: number): this {
		
		this.internal.version = version;

		return this;
	}

	// List of dashboard panels
	withPanels(panels: RowPanel[]): this {
		
		this.internal.panels = panels;

		return this;
	}

	// Configured template variables
	withTemplating(templating: DashboardTemplating): this {
		
		this.internal.templating = templating;

		return this;
	}

	// Contains the list of annotations that are associated with the dashboard.
	// Annotations are used to overlay event markers and overlay event tags on graphs.
	// Grafana comes with a native annotation store and the ability to add annotation events directly from the graph panel or via the HTTP API.
	// See https://grafana.com/docs/grafana/latest/dashboards/build-dashboards/annotate-visualizations/
	withAnnotations(annotations: AnnotationContainer): this {
		
		this.internal.annotations = annotations;

		return this;
	}

	// Links with references to other dashboards or external websites.
	withLinks(links: DashboardLink[]): this {
		
		this.internal.links = links;

		return this;
	}

}
